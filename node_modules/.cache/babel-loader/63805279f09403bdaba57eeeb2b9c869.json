{"ast":null,"code":"//ES6 for React JS\nconsole.log('ES6 for React JS');\nconsole.log(' '); //Implementation with Var \n\nconsole.log('Implementation with Var ->');\n\nfunction hello() {\n  for (var i = 0; i < 5; i++) {\n    console.log(i);\n  }\n\n  console.log(i);\n}\n\nhello();\nconsole.log(' '); //Implementation with Let\n\nconsole.log('Implementation with Let ->');\n\nfunction sayHello() {\n  for (var i = 0; i < 5; i++) {\n    console.log(i);\n  } //i will be limited to for loop scope \n\n\n  console.log('i will be limited to for loop scope '); //will give error \n  //console.log(i);\n}\n\nsayHello();\nconsole.log(' '); //Const Variable also has local scope\n\nconsole.log('Const Variable also has local scope');\nvar x = 2;\nconsole.log(x); //x = 3;\n//console.log(x);\n//will give Error if we reassign Const variable\n\nconsole.log(' '); //Implementation of Objects \n\nconsole.log('Implementation of Objects');\nvar obj = {\n  name: 'shivam',\n  //Traditional Method for Methods in JS\n  walk: function walk() {\n    console.log('will Walk in Traditional Way');\n  },\n  //ES6 way for Methods\n  talk: function talk() {\n    console.log('will Talk in ES6 Way');\n  },\n  this_custom: function this_custom() {\n    console.log('this -> ', this);\n  }\n};\nobj.walk();\nconsole.log(' '); //Targeting property by Bracket Notation\n\nconsole.log('Targeting property by Bracket Notation');\nvar targetName = 'name';\nconsole.log(obj[targetName]);\nconsole.log(' ');\nobj.talk();\nconsole.log(' '); //Implementation of This keyword\n\nconsole.log('Implementation of This keyword'); //This will Refer to the Calling Object\n\nconsole.log('This will Refer to the Calling Object');\nobj.this_custom(); //But Creating a variable and passing refrence ('creating a Reference not calling the function') to function to that variable\n\nvar custom_this = obj.this_custom; //Now Calling our variable as function\n//We will get this refrencing to window not the calling Object\n\nconsole.log(custom_this());\nconsole.log(' '); //Binding This in ES6\n//Remember JS Functions are Objects\n//Bind can be used to Bind a function to an Object\n//Here \" custom_this_1 \" will have a new instance of \" obj.this_custom \" and bind Method will bind \" obj.this_custom \" with Argument passed in \" bind(Argument) \" Method\n\nvar custom_this_1 = obj.this_custom.bind(obj);\ncustom_this_1();\nconsole.log(' '); //Fat Arrow Functions \" function = () => {} \"\n\nvar square = function square(number) {\n  console.log(number * number);\n};\n\nsquare(3); //Requirement of Fat Arrow Functions\n\nvar jobs = [{\n  jobId: 1,\n  isActive: true\n}, {\n  jobId: 2,\n  isActive: true\n}, {\n  jobId: 3,\n  isActive: false\n}];\nvar activeJobs = jobs.filter(function (job) {\n  return job.isActive;\n});\nconsole.log(activeJobs);\nconsole.log(' '); //Fat Arrow Functions and This \n\nvar person = {\n  walk: function walk() {\n    console.log('this ', this);\n  }\n};\nperson.walk();\nvar per1 = person.walk;\nper1();","map":{"version":3,"sources":["/Users/shivamsharma/Desktop/Dumy/ReactJs/js_for_react-devs/src/index.js"],"names":["console","log","hello","i","sayHello","x","obj","name","walk","talk","this_custom","targetName","custom_this","custom_this_1","bind","square","number","jobs","jobId","isActive","activeJobs","filter","job","person","per1"],"mappings":"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","sourcesContent":["//ES6 for React JS\nconsole.log('ES6 for React JS');\n\nconsole.log(' ');\n//Implementation with Var \nconsole.log('Implementation with Var ->');\nfunction hello(){\n  for(var i  = 0; i < 5; i++){\n    console.log(i);\n  }\n  console.log(i);\n}\n\nhello();\n\nconsole.log(' ');\n//Implementation with Let\nconsole.log('Implementation with Let ->');\nfunction sayHello(){\n  for(let i = 0; i < 5; i++){\n    console.log(i);\n  }\n  //i will be limited to for loop scope \n  console.log('i will be limited to for loop scope ');\n  //will give error \n  //console.log(i);\n}\n\nsayHello();\n\nconsole.log(' ');\n//Const Variable also has local scope\nconsole.log('Const Variable also has local scope');\nconst x = 2;\nconsole.log(x);\n\n//x = 3;\n//console.log(x);\n//will give Error if we reassign Const variable\n\nconsole.log(' ');\n//Implementation of Objects \nconsole.log('Implementation of Objects');\n\nconst obj = {\n  name: 'shivam',\n  //Traditional Method for Methods in JS\n  walk: function(){console.log('will Walk in Traditional Way')},\n  //ES6 way for Methods\n  talk(){console.log('will Talk in ES6 Way')},\n  this_custom(){console.log('this -> ',this)}\n}\n\nobj.walk();\nconsole.log(' ');\n//Targeting property by Bracket Notation\nconsole.log('Targeting property by Bracket Notation');\nconst targetName = 'name';\nconsole.log(obj[targetName]);\n\nconsole.log(' ');\nobj.talk();\n\nconsole.log(' ');\n//Implementation of This keyword\nconsole.log('Implementation of This keyword');\n//This will Refer to the Calling Object\nconsole.log('This will Refer to the Calling Object');\nobj.this_custom();\n//But Creating a variable and passing refrence ('creating a Reference not calling the function') to function to that variable\nconst custom_this = obj.this_custom;\n\n//Now Calling our variable as function\n//We will get this refrencing to window not the calling Object\nconsole.log(custom_this());\n\nconsole.log(' ');\n//Binding This in ES6\n//Remember JS Functions are Objects\n//Bind can be used to Bind a function to an Object\n//Here \" custom_this_1 \" will have a new instance of \" obj.this_custom \" and bind Method will bind \" obj.this_custom \" with Argument passed in \" bind(Argument) \" Method\nconst custom_this_1 = obj.this_custom.bind(obj);\ncustom_this_1();\n\nconsole.log(' ');\n//Fat Arrow Functions \" function = () => {} \"\n\nconst square = (number) => {console.log(number * number)};\n\nsquare(3);\n\n //Requirement of Fat Arrow Functions\n const jobs = [\n   { \n     jobId : 1,\n     isActive : true\n   },\n   {\n    jobId : 2,\n    isActive : true\n   },\n   {\n    jobId : 3,\n    isActive : false\n   }\n ]\n\n const activeJobs = jobs.filter((job) => job.isActive);\n console.log(activeJobs);\n\n\n console.log(' ');\n //Fat Arrow Functions and This \n var person = {\n   walk(){\n     console.log('this ', this);\n   }\n }\n\n person.walk();\n\n const per1 = person.walk;\n\n per1();"]},"metadata":{},"sourceType":"module"}