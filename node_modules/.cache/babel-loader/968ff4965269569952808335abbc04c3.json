{"ast":null,"code":"import _possibleConstructorReturn from \"/Users/shivamsharma/Desktop/Dumy/ReactJs/js_for_react-devs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shivamsharma/Desktop/Dumy/ReactJs/js_for_react-devs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shivamsharma/Desktop/Dumy/ReactJs/js_for_react-devs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/Users/shivamsharma/Desktop/Dumy/ReactJs/js_for_react-devs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shivamsharma/Desktop/Dumy/ReactJs/js_for_react-devs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _objectSpread from \"/Users/shivamsharma/Desktop/Dumy/ReactJs/js_for_react-devs/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//ES6 for React JS\n//Importing Teacher_1 module from Teacher.js\nimport Teacher_1, { promote } from './Teacher';\nconsole.log('ES6 for React JS'); //Implementation with Var \n\nconsole.log(' ');\nconsole.log('Implementation with Var ->');\n\nfunction hello() {\n  for (var i = 0; i < 5; i++) {\n    console.log(i);\n  }\n\n  console.log(i);\n}\n\nhello(); //Implementation with Let\n\nconsole.log(' ');\nconsole.log('Implementation with Let ->');\n\nfunction sayHello() {\n  for (var i = 0; i < 5; i++) {\n    console.log(i);\n  } //i will be limited to for loop scope \n\n\n  console.log('i will be limited to for loop scope '); //will give error \n  //console.log(i);\n}\n\nsayHello(); //Const Variable also has local scope\n\nconsole.log(' ');\nconsole.log('Const Variable also has local scope');\nvar x = 2;\nconsole.log(x); //x = 3;\n//console.log(x);\n//will give Error if we reassign Const variable\n//Implementation of Objects \n\nconsole.log(' ');\nconsole.log('Implementation of Objects');\nvar obj = {\n  name: 'shivam',\n  //Traditional Method for Methods in JS\n  walk: function walk() {\n    console.log('will Walk in Traditional Way');\n  },\n  //ES6 way for Methods\n  talk: function talk() {\n    console.log('will Talk in ES6 Way');\n  },\n  this_custom: function this_custom() {\n    console.log('this -> ', this);\n  }\n};\nobj.walk(); //Targeting property by Bracket Notation\n\nconsole.log(' ');\nconsole.log('Targeting property by Bracket Notation');\nvar targetName = 'name';\nconsole.log(obj[targetName]);\nconsole.log(' ');\nobj.talk(); //Implementation of This keyword\n\nconsole.log(' ');\nconsole.log('Implementation of This keyword'); //This will Refer to the Calling Object\n\nconsole.log('This will Refer to the Calling Object');\nobj.this_custom(); //But Creating a variable and passing refrence ('creating a Reference not calling the function') to function to that variable\n\nvar custom_this = obj.this_custom; //Now Calling our variable as function\n//We will get this refrencing to window not the calling Object\n\nconsole.log(custom_this());\nconsole.log(' '); //Binding This in ES6\n//Remember JS Functions are Objects\n//Bind can be used to Bind a function to an Object\n//Here \" custom_this_1 \" will have a new instance of \" obj.this_custom \" and bind Method will bind \" obj.this_custom \" with Argument passed in \" bind(Argument) \" Method\n\nvar custom_this_1 = obj.this_custom.bind(obj);\ncustom_this_1(); //Fat Arrow Functions \" function = () => {} \"\n\nconsole.log(' ');\nconsole.log('Fat Arrow Functions \" function = () => {} \"');\n\nvar square = function square(number) {\n  console.log(number * number);\n};\n\nsquare(3); //Requirement of Fat Arrow Functions\n\nconsole.log(' ');\nconsole.log('Fat Arrow Functions \" function = () => {} \"');\nvar jobs = [{\n  jobId: 1,\n  isActive: true\n}, {\n  jobId: 2,\n  isActive: true\n}, {\n  jobId: 3,\n  isActive: false\n}];\nconsole.log(jobs);\nconsole.log('Will list every active job in Jobs Array');\nvar activeJobs = jobs.filter(function (job) {\n  return job.isActive;\n});\nconsole.log(activeJobs); //Fat Arrow Functions and This \n\nconsole.log(' '); //We used Old Syntax of funtion Definition\n//in this case \" setTimeout \" is not bound to person object and will refer to Window \n//Additional thing you will learn is JS executes Line by Line but functions like setTimeout are in queue thread in JS and will be executed at the end of other statements\n\nconsole.log('Additional thing you will learn is JS executes Line by Line but functions like setTimeout are in queue thread in JS and will be executed at the end of other statements');\nvar person_1 = {\n  walk: function walk() {\n    setTimeout(function () {\n      console.log(' ');\n      console.log(' this is in setTimeout function and will be excuted at the end of JS File because of Queue Thread ', this);\n    }, 1000);\n  }\n};\nperson_1.walk(); //We used ES6 Syntax of Function Definition\n//in this scenario with fat arrow functions will inherit this keyword and will refer to the object in which they are defined when we call them\n\nconsole.log(' ');\nvar person_2 = {\n  talk: function talk() {\n    var _this = this;\n\n    setTimeout(function () {\n      console.log(' ');\n      console.log('this is in setTimeout function and will be excuted at the end of JS File because of Queue Thread ', _this);\n    }, 1000);\n  }\n};\nperson_2.talk(); //Array.Map()\n//map() function accepts call back function\n\nconsole.log(' ');\nconsole.log('Array.Map() map() function accepts call back function');\nvar colors = ['red', 'green', 'blue'];\nconsole.log('Will list Array of Colors ', colors); //Will List Every Single Color as List\n\nconsole.log(' ');\nconsole.log('Will List Every Single Color as List');\nvar items = colors.map(function (color) {\n  return \"<li>\".concat(color, \"</li>\");\n});\nconsole.log(items); //Object destructuring\n\nconsole.log(' ');\nvar address = {\n  street: 'Mohalla Sheikhan',\n  city: 'Dasuya',\n  country: 'India'\n};\nconsole.log(address); //Example of Object destructuring\n\nconsole.log(' ');\nconsole.log('Example of Object destructuring');\nvar street = address.street,\n    city = address.city,\n    country = address.country;\nconsole.log(street, city, country); //Example of Object Destructuring using alias \n//We are extracting street property of address object \n\nconsole.log(' ');\nconsole.log('Example of Object destructuring, We are extracting street property of address object ');\nvar st = address.street;\nconsole.log(st); //Spread Operator\n\nconsole.log(' ');\nconsole.log('Spred Operator'); //Old Way is \n\nconsole.log(' ');\nconsole.log('Old Way is ');\nvar first = [1, 2, 3];\nvar second = [4, 5, 6];\nvar combine = first.concat(second); //Will Combine\n\nconsole.log(combine); //New way using spread operator\n\nconsole.log(' ');\nconsole.log('New way using spread operator');\nvar clone = [].concat(first, second); //Will Clone\n\nconsole.log(clone); //Combine and add new props in an object\n\nconsole.log(' ');\nconsole.log('Combine and add new props in an object');\nvar fir = {\n  name: 'shivam'\n};\nvar sec = {\n  job: 'cs'\n};\n\nvar final = _objectSpread({}, fir, sec, {\n  location: \"Chandigarh\"\n});\n\nconsole.log(final); //Classes\n\nconsole.log(' ');\nconsole.log('In Classes first letter is Uppercase '); //Creating a Blue Print of Object can be made with Classes\n\nvar Person =\n/*#__PURE__*/\nfunction () {\n  //with OOPS Concept we have to call constructor function to instantiate the Class and \n  //set some values \n  function Person(myName) {\n    _classCallCheck(this, Person);\n\n    this.name = myName;\n  }\n\n  _createClass(Person, [{\n    key: \"walk\",\n    value: function walk() {\n      console.log('walk');\n    }\n  }]);\n\n  return Person;\n}(); //creating a person object using \"new\" keyword \n//we set person_4 to a new Person Object \n\n\nvar person_4 = new Person('shivam');\nconsole.log(person_4.name); //Inheritance\n\nconsole.log(' ');\nconsole.log('Inheritance');\n\nvar Teacher =\n/*#__PURE__*/\nfunction (_Person) {\n  _inherits(Teacher, _Person);\n\n  function Teacher(name, degree) {\n    var _this2;\n\n    _classCallCheck(this, Teacher);\n\n    //We have to call Constructor of Parent Class in Child Class using Super Keyword\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Teacher).call(this, name));\n    _this2.name = name;\n    _this2.degree = degree;\n    return _this2;\n  }\n\n  _createClass(Teacher, [{\n    key: \"teach\",\n    value: function teach() {\n      console.log('teach');\n    }\n  }]);\n\n  return Teacher;\n}(Person); //If after extending Parent class we do not pass arguments which are required in Parent \n//Constructor then we get property name undefined like this \n\n\nvar teacher_1 = new Teacher();\nconsole.log(teacher_1.name); //But in this case I'm passing arguments in teacher object then it will display\n\nconsole.log(' ');\nvar teacher_2 = new Teacher('shivam', 'CS');\nconsole.log(teacher_2.name);\nconsole.log(teacher_2.degree); //Modules\n//We created 2 Modules one for Person.js as Person_1 and other is Teacher.js as Teacher_1\n//Imported them at Top and used to create an object. \n//This is known as \"Modularisation\"\n//We can Import with Default Keyword which will import everything\n//We can use named export which will Import only specified Imports\n\nconsole.log(' ');\nconsole.log('Modules');\nvar teacher_3 = new Teacher_1('shivam', 'CS');\nteacher_3.walk();","map":{"version":3,"sources":["/Users/shivamsharma/Desktop/Dumy/ReactJs/js_for_react-devs/src/index.js"],"names":["Teacher_1","promote","console","log","hello","i","sayHello","x","obj","name","walk","talk","this_custom","targetName","custom_this","custom_this_1","bind","square","number","jobs","jobId","isActive","activeJobs","filter","job","person_1","setTimeout","person_2","colors","items","map","color","address","street","city","country","st","first","second","combine","concat","clone","fir","sec","final","location","Person","myName","person_4","Teacher","degree","teacher_1","teacher_2","teacher_3"],"mappings":"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","sourcesContent":["//ES6 for React JS\n\n//Importing Teacher_1 module from Teacher.js\nimport Teacher_1, {promote} from './Teacher';\n\nconsole.log('ES6 for React JS');\n\n//Implementation with Var \nconsole.log(' ');\nconsole.log('Implementation with Var ->');\nfunction hello() {\n  for (var i = 0; i < 5; i++) {\n    console.log(i);\n  }\n  console.log(i);\n}\n\nhello();\n\n//Implementation with Let\nconsole.log(' ');\nconsole.log('Implementation with Let ->');\nfunction sayHello() {\n  for (let i = 0; i < 5; i++) {\n    console.log(i);\n  }\n  //i will be limited to for loop scope \n  console.log('i will be limited to for loop scope ');\n  //will give error \n  //console.log(i);\n}\n\nsayHello();\n\n//Const Variable also has local scope\nconsole.log(' ');\nconsole.log('Const Variable also has local scope');\nconst x = 2;\nconsole.log(x);\n\n//x = 3;\n//console.log(x);\n//will give Error if we reassign Const variable\n\n//Implementation of Objects \nconsole.log(' ');\nconsole.log('Implementation of Objects');\n\nconst obj = {\n  name: 'shivam',\n  //Traditional Method for Methods in JS\n  walk: function () { console.log('will Walk in Traditional Way') },\n  //ES6 way for Methods\n  talk() { console.log('will Talk in ES6 Way') },\n  this_custom() { console.log('this -> ', this) }\n}\n\nobj.walk();\n\n//Targeting property by Bracket Notation\nconsole.log(' ');\nconsole.log('Targeting property by Bracket Notation');\nconst targetName = 'name';\nconsole.log(obj[targetName]);\n\nconsole.log(' ');\nobj.talk();\n\n//Implementation of This keyword\nconsole.log(' ');\nconsole.log('Implementation of This keyword');\n//This will Refer to the Calling Object\nconsole.log('This will Refer to the Calling Object');\nobj.this_custom();\n//But Creating a variable and passing refrence ('creating a Reference not calling the function') to function to that variable\nconst custom_this = obj.this_custom;\n\n//Now Calling our variable as function\n//We will get this refrencing to window not the calling Object\nconsole.log(custom_this());\n\nconsole.log(' ');\n//Binding This in ES6\n//Remember JS Functions are Objects\n//Bind can be used to Bind a function to an Object\n//Here \" custom_this_1 \" will have a new instance of \" obj.this_custom \" and bind Method will bind \" obj.this_custom \" with Argument passed in \" bind(Argument) \" Method\nconst custom_this_1 = obj.this_custom.bind(obj);\ncustom_this_1();\n\n\n//Fat Arrow Functions \" function = () => {} \"\nconsole.log(' ');\nconsole.log('Fat Arrow Functions \" function = () => {} \"');\n\nconst square = (number) => { console.log(number * number) };\nsquare(3);\n\n//Requirement of Fat Arrow Functions\nconsole.log(' ');\nconsole.log('Fat Arrow Functions \" function = () => {} \"');\nconst jobs = [\n  {\n    jobId: 1,\n    isActive: true\n  },\n  {\n    jobId: 2,\n    isActive: true\n  },\n  {\n    jobId: 3,\n    isActive: false\n  }\n]\n\nconsole.log(jobs);\nconsole.log('Will list every active job in Jobs Array');\nconst activeJobs = jobs.filter((job) => job.isActive);\nconsole.log(activeJobs);\n\n//Fat Arrow Functions and This \nconsole.log(' ');\n//We used Old Syntax of funtion Definition\n//in this case \" setTimeout \" is not bound to person object and will refer to Window \n//Additional thing you will learn is JS executes Line by Line but functions like setTimeout are in queue thread in JS and will be executed at the end of other statements\nconsole.log('Additional thing you will learn is JS executes Line by Line but functions like setTimeout are in queue thread in JS and will be executed at the end of other statements');\nvar person_1 = {\n  walk() {\n    setTimeout(function () {\n      console.log(' ');\n      console.log(' this is in setTimeout function and will be excuted at the end of JS File because of Queue Thread ', this)\n    }, 1000)\n  }\n}\n\nperson_1.walk();\n\n//We used ES6 Syntax of Function Definition\n//in this scenario with fat arrow functions will inherit this keyword and will refer to the object in which they are defined when we call them\nconsole.log(' ');\nvar person_2 = {\n  talk() {\n    setTimeout(() => {\n      console.log(' ');\n      console.log('this is in setTimeout function and will be excuted at the end of JS File because of Queue Thread ', this);\n    }, 1000)\n  }\n}\n\nperson_2.talk();\n\n//Array.Map()\n//map() function accepts call back function\nconsole.log(' ');\nconsole.log('Array.Map() map() function accepts call back function');\nconst colors = ['red', 'green', 'blue'];\nconsole.log('Will list Array of Colors ',colors);\n\n//Will List Every Single Color as List\nconsole.log(' ');\nconsole.log('Will List Every Single Color as List');\nconst items = colors.map(color => `<li>${color}</li>`);\nconsole.log(items);\n\n//Object destructuring\nconsole.log(' ');\nconst address = {\n  street: 'Mohalla Sheikhan',\n  city: 'Dasuya',\n  country: 'India'\n}\nconsole.log(address);\n\n//Example of Object destructuring\nconsole.log(' ');\nconsole.log('Example of Object destructuring');\nconst { street, city, country } = address;\nconsole.log(street, city, country);\n\n//Example of Object Destructuring using alias \n//We are extracting street property of address object \nconsole.log(' ');\nconsole.log('Example of Object destructuring, We are extracting street property of address object ');\nconst { street: st } = address;\nconsole.log(st);\n\n//Spread Operator\nconsole.log(' ');\nconsole.log('Spred Operator');\n\n//Old Way is \nconsole.log(' ');\nconsole.log('Old Way is ');\nconst first = [1,2,3];\nconst second = [4,5,6];\n\nconst combine = first.concat(second);\n//Will Combine\nconsole.log(combine);\n\n//New way using spread operator\nconsole.log(' ');\nconsole.log('New way using spread operator');\nconst clone = [...first,...second];\n//Will Clone\nconsole.log(clone);\n\n//Combine and add new props in an object\nconsole.log(' ');\nconsole.log('Combine and add new props in an object');\nconst fir = {\n  name: 'shivam'\n};\n\nconst sec = {\n  job: 'cs'\n};\n\nconst final = {...fir, ...sec, location: \"Chandigarh\"};\nconsole.log(final);\n\n//Classes\nconsole.log(' ');\nconsole.log('In Classes first letter is Uppercase ');\n\n//Creating a Blue Print of Object can be made with Classes\nclass Person{\n  //with OOPS Concept we have to call constructor function to instantiate the Class and \n  //set some values \n  constructor(myName){\n    this.name = myName\n  }\n\n  walk(){\n    console.log('walk');\n  }\n}\n\n//creating a person object using \"new\" keyword \n//we set person_4 to a new Person Object \nconst person_4 = new Person('shivam');\nconsole.log(person_4.name);\n\n//Inheritance\nconsole.log(' ');\nconsole.log('Inheritance');\nclass Teacher extends Person{\n  constructor(name, degree){\n    //We have to call Constructor of Parent Class in Child Class using Super Keyword\n    super(name);\n    this.name = name;\n    this.degree = degree;\n  }\n  teach(){\n    console.log('teach');\n  }\n}\n\n//If after extending Parent class we do not pass arguments which are required in Parent \n//Constructor then we get property name undefined like this \nconst teacher_1 = new Teacher();\nconsole.log(teacher_1.name);\n\n//But in this case I'm passing arguments in teacher object then it will display\nconsole.log(' ');\nconst teacher_2 = new Teacher('shivam', 'CS');\nconsole.log(teacher_2.name);\nconsole.log(teacher_2.degree);\n\n//Modules\n//We created 2 Modules one for Person.js as Person_1 and other is Teacher.js as Teacher_1\n//Imported them at Top and used to create an object. \n//This is known as \"Modularisation\"\n\n//We can Import with Default Keyword which will import everything\n//We can use named export which will Import only specified Imports\nconsole.log(' ');\nconsole.log('Modules');\nconst teacher_3 = new Teacher_1('shivam', 'CS');\nteacher_3.walk();"]},"metadata":{},"sourceType":"module"}